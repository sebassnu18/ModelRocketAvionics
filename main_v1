// This code integrates the imu and sd module

// include relevant libraries
#include <SPI.h>
#include <SD.h>
#include <Wire.h>

// define led pins
const int red = 8; const int green = 9;

// define I2C address of MPU and initialize variables
const int MPU = 0x68;
int16_t rawAcX, rawAcY, rawAcZ, rawGyX, rawGyY, rawGyZ;
float biasX = 0.0, biasY = 0.0, biasZ = 0.0;
float calibratedAcX, calibratedAcY, calibratedAcZ, calibratedGyX, calibratedGyY, calibratedGyZ;
float accelerationX, accelerationY, accelerationZ;
float gyroX, gyroY, gyroZ;

// create file datatype
File myFile;

void setup() {  
  // set up leds
  pinMode(red,OUTPUT);
  pinMode(green,OUTPUT);
  // indicate that system is not ready yet
  digitalWrite(red,HIGH);
  digitalWrite(green,LOW);
  // Initialize I2C communication
  Wire.begin(); 
  Wire.beginTransmission(MPU);
  Wire.write(0x6B); // power management register
  Wire.write(0); // wake up mpu (set sleep mode to 0)
  Wire.endTransmission(true);
  calibrateSensors(); // calibrate sensors
// initialize serial connection 
Serial.begin(9600);  
// initialize SD card
Serial.print("Initializing SD card...");
 
  if (!SD.begin(4)) {
    Serial.println("initialization failed!");
    while (1); // stops program if sd can't be initialized
  }
  
 Serial.println("initialization done.");

 // creates a new data file if one does not already exist
  if (!SD.exists("DATA3.txt")) {
    myFile = SD.open("DATA3.txt", FILE_WRITE);
    if (myFile) {
      myFile.println("TIME (s), Xa (m/s^2), Ya (m/s^2), Za (m/s^2), Xg (°/s), Yg (°/s), Zg (°/s)");
      myFile.close();
    } else {
      Serial.println("Error opening file for writing!");
    }
  }
      
}

void loop() {
  // put your main code here, to run repeatedly:

  // indicate that the system is working
  digitalWrite(red, LOW);
  digitalWrite(green, HIGH);
  
    readSensors(); // read sensor data
    calibrateValues(); // calibrate sensor readings
    scaleAndConvert(); // scale and convert sensor values
    displayData(); // display sensor values and time
    save();// save data to SD card
    delay(200);
 
}

void calibrateSensors() {
  int numCalibrationSamples = 1000;  // number of calibration samples

  for (int i = 0; i < numCalibrationSamples; i++) {
    Wire.beginTransmission(MPU);
    Wire.write(0x3B); // starting register of accelerometer data
    Wire.endTransmission(false);
    Wire.requestFrom(MPU, 14, true); // request accelerometer & gyroscope data
    // raw accelerometer readings
    rawAcX = Wire.read() << 8 | Wire.read();
    rawAcY = Wire.read() << 8 | Wire.read();
    rawAcZ = Wire.read() << 8 | Wire.read();
    Wire.read(); // skip temp data
    Wire.read(); // skip temp data
    // raw gyroscope readings
    rawGyX = Wire.read() << 8 | Wire.read();
    rawGyY = Wire.read() << 8 | Wire.read();
    rawGyZ = Wire.read() << 8 | Wire.read();

    biasX += rawAcX;
    biasY += rawAcY;
    biasZ += rawAcZ;
    delay(10);  // delay between samples for stability
  }

  biasX /= numCalibrationSamples;
  biasY /= numCalibrationSamples;
  biasZ /= numCalibrationSamples;
}

void readSensors() {
  Wire.beginTransmission(MPU);
  Wire.write(0x3B); // starting register of accelerometer data
  Wire.endTransmission(false);
  Wire.requestFrom(MPU, 14, true); // request accelerometer and gyroscope data
  // accelerometer raw data
  rawAcX = Wire.read() << 8 | Wire.read();
  rawAcY = Wire.read() << 8 | Wire.read();
  rawAcZ = Wire.read() << 8 | Wire.read();
  Wire.read(); // skip temp
  Wire.read(); // skip temp
  // gyroscope raw data
  rawGyX = Wire.read() << 8 | Wire.read();
  rawGyY = Wire.read() << 8 | Wire.read();
  rawGyZ = Wire.read() << 8 | Wire.read();
}

void calibrateValues() {
  calibratedAcX = rawAcX - biasX;
  calibratedAcY = rawAcY - biasY;
  calibratedAcZ = rawAcZ - biasZ;
  calibratedGyX = rawGyX;
  calibratedGyY = rawGyY;
  calibratedGyZ = rawGyZ;
}

void scaleAndConvert() {
  float accelSensitivity = 2.0 / 32767.0;  // assuming ±4g full-scale range (8192 LSB/g, low res)
  float gyroSensitivity = 250.0 / 32767.0; // assuming ±250°/s full-scale range
  // converting to m/s²
  accelerationX = calibratedAcX * accelSensitivity * 9.81;
  accelerationY = calibratedAcY * accelSensitivity * 9.81;
  accelerationZ = calibratedAcZ * accelSensitivity * 9.81;
  // converting to °/s
  gyroX = calibratedGyX * gyroSensitivity;
  gyroY = calibratedGyY * gyroSensitivity;
  gyroZ = calibratedGyZ * gyroSensitivity;
}

void displayData() {
// calculate time elapsed since code started running
  unsigned long elapsedTime = millis()/1000-10;
 //writes the elapsed time to the serial monitor 
   Serial.print("Time: ");
  Serial.print(elapsedTime);
 // Serial.print("Acceleration (m/s²): ");
  Serial.print(", Xa = ");
  Serial.print(accelerationX);
  Serial.print(", Ya = ");
  Serial.print(accelerationY);
  Serial.print(", Za = ");
  Serial.print(accelerationZ);

  //Serial.print("Gyroscope (°/s): ");
  Serial.print(", Xg = ");
  Serial.print(gyroX);
  Serial.print(", Yg = ");
  Serial.print(gyroY);
  Serial.print(", Zg = ");
  Serial.println(gyroZ);
  
}

void save() {
   //writes the current time, accelerometer and gyroscope data to SD card
 myFile = SD.open("DATA3.txt", FILE_WRITE);  
  // time
  if (myFile) {
  unsigned long elapsedTime = millis()/1000-10;
  myFile.print(elapsedTime);
  myFile.print(',');
  myFile.print(' ');
  // accelerometer data
  myFile.print(accelerationX); myFile.print(','); myFile.print(' ');
  myFile.print(accelerationY); myFile.print(','); myFile.print(' ');
  myFile.print(accelerationZ); myFile.print(','); myFile.print(' ');
  // gyroscope data
  myFile.print(gyroX); myFile.print(','); myFile.print(' ');
  myFile.print(gyroY); myFile.print(','); myFile.print(' ');
  myFile.print(gyroZ); 
  // done
  myFile.println();
  myFile.close();
  } else {
    Serial.println("Error opening file for writing!");
  }
}
