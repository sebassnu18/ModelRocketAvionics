// This code displays temperature, pressure and altitude values from the breakout board containing the BMP390 sensor
// Accuracy is +/- .25m, so the code only displays the first decimal
// The sensor is calibrated so that the initial altitude is set to zero 

#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include "Adafruit_BMP3XX.h"

// Uncomment if you want to use SPI
//#define BMP_SCK 13
//#define BMP_MISO 12
//#define BMP_MOSI 11
//#define BMP_CS 10

#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BMP3XX bmp;
float initialAltitude = 0.0;  // Variable to store the initial altitude
bool isCalibrated = false;  // Flag to indicate if calibration is complete
const float ALTITUDE_THRESHOLD = 10.0f;

void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  while (!Serial);

  if (!bmp.begin_I2C()) {   // hardware I2C mode, can pass in address & alt Wire
    //if (! bmp.begin_SPI(BMP_CS)) {  // hardware SPI mode  
    //if (! bmp.begin_SPI(BMP_CS, BMP_SCK, BMP_MISO, BMP_MOSI)) {  // software SPI mode
    Serial.println("Could not find a valid BMP3 sensor, check wiring!");
    while (1);
  }

  // Set up oversampling and filter initialization
  bmp.setTemperatureOversampling(BMP3_OVERSAMPLING_8X);
  bmp.setPressureOversampling(BMP3_OVERSAMPLING_4X);
  bmp.setIIRFilterCoeff(BMP3_IIR_FILTER_COEFF_3);
  bmp.setOutputDataRate(BMP3_ODR_50_HZ);

  // Perform altitude calibration
  calibrateAltitude();
}

void loop() {
  // put your main code here, to run repeatedly:
  if (!isCalibrated) {
    calibrateAltitude();
    return;  // Wait for calibration to complete before proceeding
  }

  if (!bmp.performReading()) {
    Serial.println("Failed to perform reading :(");
    return;
  }

  Serial.print("Temperature = ");
  Serial.print(bmp.temperature);
  Serial.println(" *C");

  Serial.print("Pressure = ");
  Serial.print(bmp.pressure / 100.0 * 0.0145);
  Serial.println(" PSI");

  Serial.print("Calibrated Altitude = ");
  //Serial.print(bmp.readAltitude(SEALEVELPRESSURE_HPA) - initialAltitude);
  Serial.print(String(bmp.readAltitude(SEALEVELPRESSURE_HPA) - initialAltitude, 1));
  Serial.println(" m");

  Serial.println();
  delay(2000);
}

void calibrateAltitude() {
  static float prevAltitude = 0.0f;
  static int stableCount = 0;

  if (bmp.performReading()) {
    float altitude = bmp.readAltitude(SEALEVELPRESSURE_HPA);

    if (abs(altitude - prevAltitude) <= ALTITUDE_THRESHOLD) {
      stableCount++;
    } else {
      stableCount = 0;
    }

    prevAltitude = altitude;

    if (stableCount >= 10) {
      initialAltitude = altitude;
      isCalibrated = true;
      Serial.print("Calibration complete. Initial Altitude = ");
      Serial.print(initialAltitude);
      Serial.println(" m");
    }
  }
}
